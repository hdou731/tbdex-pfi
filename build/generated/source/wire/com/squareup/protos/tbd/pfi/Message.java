// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.tbd.pfi.Message in pfi.proto
package com.squareup.protos.tbd.pfi;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.ReverseProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Message extends com.squareup.wire.Message<Message, Message.Builder> {
  public static final ProtoAdapter<Message> ADAPTER = new ProtoAdapter_Message();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_DATA = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String data;

  @WireField(
      tag = 2,
      adapter = "com.squareup.protos.tbd.pfi.Descriptor#ADAPTER"
  )
  public final Descriptor descriptor;

  @WireField(
      tag = 3,
      adapter = "com.squareup.protos.tbd.pfi.Attestation#ADAPTER"
  )
  public final Attestation attestation;

  public Message(String data, Descriptor descriptor, Attestation attestation) {
    this(data, descriptor, attestation, ByteString.EMPTY);
  }

  public Message(String data, Descriptor descriptor, Attestation attestation,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.data = data;
    this.descriptor = descriptor;
    this.attestation = attestation;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.data = data;
    builder.descriptor = descriptor;
    builder.attestation = attestation;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Message)) return false;
    Message o = (Message) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(data, o.data)
        && Internal.equals(descriptor, o.descriptor)
        && Internal.equals(attestation, o.attestation);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (data != null ? data.hashCode() : 0);
      result = result * 37 + (descriptor != null ? descriptor.hashCode() : 0);
      result = result * 37 + (attestation != null ? attestation.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (data != null) builder.append(", data=").append(Internal.sanitize(data));
    if (descriptor != null) builder.append(", descriptor=").append(descriptor);
    if (attestation != null) builder.append(", attestation=").append(attestation);
    return builder.replace(0, 2, "Message{").append('}').toString();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<Message, Builder> {
    public String data;

    public Descriptor descriptor;

    public Attestation attestation;

    public Builder() {
    }

    public Builder data(String data) {
      this.data = data;
      return this;
    }

    public Builder descriptor(Descriptor descriptor) {
      this.descriptor = descriptor;
      return this;
    }

    public Builder attestation(Attestation attestation) {
      this.attestation = attestation;
      return this;
    }

    @Override
    public Message build() {
      return new Message(data, descriptor, attestation, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Message extends ProtoAdapter<Message> {
    public ProtoAdapter_Message() {
      super(FieldEncoding.LENGTH_DELIMITED, Message.class, "type.googleapis.com/squareup.protos.tbd.pfi.Message", Syntax.PROTO_2, null, "pfi.proto");
    }

    @Override
    public int encodedSize(Message value) {
      int result = 0;
      result += ProtoAdapter.STRING.encodedSizeWithTag(1, value.data);
      result += Descriptor.ADAPTER.encodedSizeWithTag(2, value.descriptor);
      result += Attestation.ADAPTER.encodedSizeWithTag(3, value.attestation);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, Message value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.data);
      Descriptor.ADAPTER.encodeWithTag(writer, 2, value.descriptor);
      Attestation.ADAPTER.encodeWithTag(writer, 3, value.attestation);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public void encode(ReverseProtoWriter writer, Message value) throws IOException {
      writer.writeBytes(value.unknownFields());
      Attestation.ADAPTER.encodeWithTag(writer, 3, value.attestation);
      Descriptor.ADAPTER.encodeWithTag(writer, 2, value.descriptor);
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.data);
    }

    @Override
    public Message decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.data(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.descriptor(Descriptor.ADAPTER.decode(reader)); break;
          case 3: builder.attestation(Attestation.ADAPTER.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public Message redact(Message value) {
      Builder builder = value.newBuilder();
      if (builder.descriptor != null) builder.descriptor = Descriptor.ADAPTER.redact(builder.descriptor);
      if (builder.attestation != null) builder.attestation = Attestation.ADAPTER.redact(builder.attestation);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
