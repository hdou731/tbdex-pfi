// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.tbd.pfi.Amount in pfi.proto
package com.squareup.protos.tbd.pfi;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.ReverseProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Amount extends Message<Amount, Amount.Builder> {
  public static final ProtoAdapter<Amount> ADAPTER = new ProtoAdapter_Amount();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_AMOUNT = "";

  public static final CurrencyCode DEFAULT_CURRENCY = CurrencyCode.USD;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String amount;

  @WireField(
      tag = 2,
      adapter = "com.squareup.protos.tbd.pfi.CurrencyCode#ADAPTER"
  )
  public final CurrencyCode currency;

  public Amount(String amount, CurrencyCode currency) {
    this(amount, currency, ByteString.EMPTY);
  }

  public Amount(String amount, CurrencyCode currency, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.amount = amount;
    this.currency = currency;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.amount = amount;
    builder.currency = currency;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Amount)) return false;
    Amount o = (Amount) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(amount, o.amount)
        && Internal.equals(currency, o.currency);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (amount != null ? amount.hashCode() : 0);
      result = result * 37 + (currency != null ? currency.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (amount != null) builder.append(", amount=").append(Internal.sanitize(amount));
    if (currency != null) builder.append(", currency=").append(currency);
    return builder.replace(0, 2, "Amount{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Amount, Builder> {
    public String amount;

    public CurrencyCode currency;

    public Builder() {
    }

    public Builder amount(String amount) {
      this.amount = amount;
      return this;
    }

    public Builder currency(CurrencyCode currency) {
      this.currency = currency;
      return this;
    }

    @Override
    public Amount build() {
      return new Amount(amount, currency, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Amount extends ProtoAdapter<Amount> {
    public ProtoAdapter_Amount() {
      super(FieldEncoding.LENGTH_DELIMITED, Amount.class, "type.googleapis.com/squareup.protos.tbd.pfi.Amount", Syntax.PROTO_2, null, "pfi.proto");
    }

    @Override
    public int encodedSize(Amount value) {
      int result = 0;
      result += ProtoAdapter.STRING.encodedSizeWithTag(1, value.amount);
      result += CurrencyCode.ADAPTER.encodedSizeWithTag(2, value.currency);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, Amount value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.amount);
      CurrencyCode.ADAPTER.encodeWithTag(writer, 2, value.currency);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public void encode(ReverseProtoWriter writer, Amount value) throws IOException {
      writer.writeBytes(value.unknownFields());
      CurrencyCode.ADAPTER.encodeWithTag(writer, 2, value.currency);
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.amount);
    }

    @Override
    public Amount decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.amount(ProtoAdapter.STRING.decode(reader)); break;
          case 2: {
            try {
              builder.currency(CurrencyCode.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public Amount redact(Amount value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
